<?php

namespace Geekhub\DreamBundle\Repository;

use Geekhub\DreamBundle\Entity\Dream;
use Geekhub\DreamBundle\Entity\Status;
use Doctrine\ORM\Query\Expr as Expr;

/**
 * DreamsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DreamRepository extends CommonRepository
{
    const INTERVAL_IN_MONTHS = 1;

    public function getCountContributorsByDream(Dream $dream)
    {
        return count($this->getArrayContributorsByDream($dream));
    }

    public function getArrayContributorsByDream(Dream $dream)
    {
        return array_unique(array_merge(
            $this->getEquipmentContributors($dream)->toArray(),
            $this->getFinancialContributors($dream)->toArray(),
            $this->getWorkContributors($dream)->toArray(),
            $this->getOtherContributors($dream)->toArray()
        ));
    }

    public function getFinancialContributors(Dream $dream)
    {
        return $dream->getDreamFinancialContributions()->map($this->getUser());
    }

    public function getEquipmentContributors(Dream $dream)
    {
        return $dream->getDreamEquipmentContributions()->map($this->getUser());
    }

    public function getWorkContributors(Dream $dream)
    {
        return $dream->getDreamWorkContributions()->map($this->getUser());
    }

    public function getOtherContributors(Dream $dream)
    {
        return $dream->getDreamOtherContributions()->map($this->getUser());
    }

    public function showFinancialContributors($user, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT f.title as resource, sum(c.quantity) as totalSum, f.id as finResurceId
                           FROM GeekhubDreamBundle:FinancialContribute c
                           join c.financialResource f
                           where c.hiddenContributor = 0 and c.user = :user and c.dream = :dream
                           group by f.title
                           order by f.title
                           ')
            ->setParameter('user', $user)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function showEquipmentContributors($user, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT f.title as resource, sum(c.quantity) as totalSum, f.quantityType as qType, f.id as equipResurceId
                           FROM GeekhubDreamBundle:EquipmentContribute c
                           join c.equipmentResource f
                           where c.hiddenContributor = 0 and c.user = :user and c.dream = :dream
                           group by f.title
                           order by f.title
                           ')
            ->setParameter('user', $user)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function showWorkContributors($user, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT f.title as resource, sum(c.quantity) as totalSum, f.id as workResurceId
                           FROM GeekhubDreamBundle:WorkContribute c
                           join c.workResource f
                           where c.hiddenContributor = 0 and c.user = :user and c.dream = :dream
                           group by f.title
                           order by f.title
                           ')
            ->setParameter('user', $user)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function showOtherContributors($user, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT c.title as title, c.id as otherContrId
                           FROM GeekhubDreamBundle:OtherContribute c
                           where c.user = :user and c.dream = :dream
                           order by c.id
                           ')
            ->setParameter('user', $user)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function showSumFinancialResource($financial, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT sum(c.quantity) as totalSum
                           FROM GeekhubDreamBundle:FinancialContribute c
                           join c.financialResource f
                           where c.financialResource = :financial and c.dream = :dream
                           group by f.title
                           ')
            ->setParameter('financial', $financial)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function showSumEquipmentResource($equipment, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT sum(c.quantity) as totalSum
                           FROM GeekhubDreamBundle:EquipmentContribute c
                           join c.equipmentResource f
                           where c.equipmentResource = :equipment and c.dream = :dream
                           group by f.title
                           ')
            ->setParameter('equipment', $equipment)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function showSumWorkResource($work, $dream)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT sum(c.quantity) as totalSum
                           FROM GeekhubDreamBundle:WorkContribute c
                           join c.workResource f
                           where c.workResource = :work and c.dream = :dream
                           group by f.title
                           ')
            ->setParameter('work', $work)
            ->setParameter('dream', $dream)
            ->getResult();
    }

    public function searchDreams($text)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT d
                           FROM GeekhubDreamBundle:Dream d
                           where
                           ( d.title like :search_text or d.description like :search_text )
                           and
                           ( d.currentStatus = :status1 or d.currentStatus = :status2 or d.currentStatus = :status3 )
                           order by d.id
                           ')
            ->setParameter('search_text', '%'.$text.'%')
            ->setParameter('status1', Status::COLLECTING_RESOURCES)
            ->setParameter('status2', Status::IMPLEMENTING)
            ->setParameter('status3', Status::SUCCESS)
            ->getResult();
    }

    public function getPopularDreamsPaginated($limit = 8, $offset = 0, array $statuses = [], $orderBy = 'contributesCount', $orderDirection = 'DESC', $userId = null)
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->groupBy('d.id')
            ->orderBy($orderBy, $orderDirection)
            ->addSelect('COUNT(fc.id)+COUNT(ec.id)+COUNT(wc.id)+COUNT(oc.id) as contributesCount')
            ->leftJoin('d.dreamFinancialContributions', 'fc')
            ->orWhere('d.id=fc.dream and fc.createdAt > :datetime')
            ->leftJoin('d.dreamEquipmentContributions', 'ec')
            ->orWhere('d.id=ec.dream and ec.createdAt > :datetime')
            ->leftJoin('d.dreamWorkContributions', 'wc')
            ->orWhere('d.id=wc.dream and wc.createdAt > :datetime')
            ->leftJoin('d.dreamOtherContributions', 'oc')
            ->orWhere('d.id=oc.dream and oc.createdAt > :datetime')
            ->setParameter('datetime', new \DateTime('-10 day'));
        ;

        if ($userId) {
            $qb->andWhere('d.author_id = :user_id')->setParameter(':user_id', $userId);
        }

        if ($statuses) {
            $qb->andWhere($qb->expr()->in('d.currentStatus', $statuses));
        }

        $qb->setFirstResult($offset)->setMaxResults($limit);
//        echo $qb->getQuery()->getSQL();exit;
        $result = $qb->getQuery()->getResult();
        $result = array_map(function ($el) {
//            var_dump($el['contributesCount'].';title: '.$el[0]->getTitle().';id: '.$el[0]->getId());
            return $el[0];
        }, $result);

        return $result;
    }

    protected function getUser()
    {
        return function ($contribute) {return $contribute->getUser(); };
    }
}
